;#For Upstream server - RiemannA
(logging/init {:file "/var/log/riemann/riemann.log"})

;#Riemann client is required to send events downstream
(require 'riemann.client)
(require '[examplecom.etc.email :refer :all])
;As part of Graphite setup, including the graphite.clj plugin.
(require '[examplecom.etc.graphite :refer :all])
; As part of collectd setup, including the collectd.clj plugin
(require '[examplecom.etc.collectd :refer :all])

(let [host "0.0.0.0"]
  (repl-server {:host "127.0.0.1"})
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

;#Expires event every 10 seconds - the state of events is changed to expire after 10 seconds.
(periodically-expire 10 {:keep-keys [:host :service :tags, :state, :description, :metric]})

;#This let block defines where events are being sent 
(let [index (index)
      downstream (batch 100 1/10
        (async-queue! :agg { :queue-size     1e3
                             :core-pool-size 4
                             :max-pool-size  32}
          (forward
            (riemann.client/tcp-client :host "riemannmc"))))]

  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index

      ; Send all events to the log file.
      ;#(info %)
 ;#Defined a filtering stream to check if disk is more than 10%
      (where (and (service "disk /") (metric > 0.10))
        #(info "Disk space on / is over 10%!" %))
;#Defined a filtering stream using where - this sends events which match regular expression ^riemann.*
      (where (service #"^riemann.*")
        downstream)
        
      (where (service #"^riemann.*" )
        graph
          downstream)
      (
        tagged "collectd"
        (smap rewrite-service graph)
      )  
    )
  )
)